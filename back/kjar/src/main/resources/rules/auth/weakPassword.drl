package rules.auth;

import rs.sbnz.model.events.FailedLoginEvent;
import rs.sbnz.model.events.Note;
import rs.sbnz.model.events.BlockEvent;
import rs.sbnz.model.events.AttackEvent;
import rs.sbnz.model.events.LoginEvent;
import rs.sbnz.model.events.PasswordChangeEvent;
import rs.sbnz.model.NoteType;
import rs.sbnz.model.BlockReason;
import rs.sbnz.model.AttackType;
import rs.sbnz.model.AttackSeverity;
import rs.sbnz.model.WeakPassword;
import java.util.Set;
import rs.sbnz.model.Alarm;
import rs.sbnz.model.AlarmSeverity;
import rs.sbnz.model.AlarmType;

rule "Warn when too many accounts try to log in with the same password"
    salience 99
    when
        LoginEvent($thePassword: password)
        Set(size >= 2) from accumulate(
            LoginEvent(
                $email: email,
                password == $thePassword
            ) over window:time(6h),
            collectSet($email)
        )
        not WeakPassword(password == $thePassword);
    then
        insert(new WeakPassword($thePassword));
        System.out.printf("Password %s is weak. Do something!\n", $thePassword);
end

rule "Nag user if his password is weak"
    salience 98
    no-loop true
    when
        $loginEvent: LoginEvent($email: email, $password: password)
        WeakPassword(password == $password)
    then
        modify($loginEvent){
            setWeakPassword(true);   
        }
        System.out.printf("User %s has a weak password.\n", $email);
end

rule "Toggle flag if new password is weak"
    no-loop true
    when
       $ev: PasswordChangeEvent($password: password)
       WeakPassword(password == $password)
    then
        modify($ev){
            setIsWeak(true);   
        }
end

rule "Alarm if too many weak passwords"
    no-loop true
    when
        Set(size >= 50) from accumulate(
            WeakPassword(
                $password: password
            ) over window:time(1h),
            collectSet($password)
        )
        not Alarm(
            severity == AlarmSeverity.NORMAL, 
            type == AlarmType.WEAK_PASSWORD
        ) over window:time(1h)
    then
        insert(new Alarm(AlarmSeverity.NORMAL, AlarmType.WEAK_PASSWORD, "Please increase password complexity for new users."));
        System.out.printf("Alarm for too many weak passwords has been fired!\n");
end